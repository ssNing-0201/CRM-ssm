package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Mon May 16 14:50:12 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Mon May 16 14:50:12 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Mon May 16 14:50:12 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Mon May 16 14:50:12 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Mon May 16 14:50:12 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Mon May 16 14:50:12 CST 2022
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件进行分页查询
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id批量删除
     * @param id
     * @return
     */
    int deleteActivityByIds(String[] id);

    /**
     * 通过id查市场活动
     * @param id
     * @return
     */
    Activity selectActivityByID(String id);

    /**
     * 查询所有的市场活动对象
     * @return
     */
    List<Activity> selectActivity();

    List<Activity> selectActivityById(String[] id);

    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询市场活动明细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据ClueID查询该线索相关联的市场活动明细信息
     * @param id
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String id);

    /**
     * 根据name模糊查询市场活动，并且将已跟市场活动关联过的排除
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

    /**
     * 根据ids查询市场活动明细信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    List<Activity> selectActivityForDetailByNameAndClueId(Map<String,Object> map);

    /**
     * 根据名称模糊查询市场活动
     * @param activityName
     * @return
     */
    List<Activity> selectActivityForDetailByName(String activityName);


}